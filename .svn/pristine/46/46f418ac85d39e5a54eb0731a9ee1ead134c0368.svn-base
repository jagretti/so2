// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

//Ejercicio 1

void readStrFromUser(int usrAddr, char *outStr)
{
    int i = 0, c;
    do {
        ASSERT(machine->ReadMem(usrAddr+i,1,&c));
        outStr[i++] = c;
    } while (c != 0);
}

void readBuffFromUsr(int usrAddr, char *outBuff, int byteCount) 
{
    int c, i = 0;
    while (byteCount > 0) {
        ASSERT(machine->ReadMem(usrAddr+i,1,&c));
        outBuff[i++] = c;
        byteCount--;
    }
}

void writeStrToUsr(char *str, int usrAddr) 
{
    int c, i = 0;
    while ((c = str[i++]) != '\0') {
        ASSERT(machine->WriteMem(usrAddr+i,1,c));
    }
}

void writeBuffToUsr(char *str, int usrAddr, int byteCount)
{
    int i = 0;
    while (byteCount > 0) {
        ASSERT(machine -> WriteMem(usrAddr+i,1,str[i]));
        byteCount--;
        i++;
    }
}

void
incrementarPC() ///sacado de https://users.cs.duke.edu/~narten/110/nachos/main/node33.html#SECTION00073000000000000000
{
    int pc = machine->ReadRegister(PCReg);
    machine->WriteRegister(PrevPCReg,pc);
    pc = machine->ReadRegister(NextPCReg);
    machine->WriteRegister(PCReg,pc);
    pc += 4;
    machine->WriteRegister(NextPCReg,pc);
}

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);

    if (which == SyscallException) {
        switch (type) {
            case SC_Halt:{
	            DEBUG('a', "Shutdown, initiated by user program.\n");
   	            interrupt->Halt();
            }
            case SC_Create:{
                int arg = machine->ReadRegister(4);
                char name[128];
                readStrFromUser(arg, name);
                DEBUG('u',"Creo archivo %s\n", name);
                fileSystem->Create(name,0);
                incrementarPC();
                break;
            }
            case SC_Write:{
                int fd = machine->ReadRegister(6);
                ASSERT(fd != 0); //stdin DEVOLVER ERROR
                //ver que pasa si es 1
                int size = machine->ReadRegister(5);
                char *buff = new char[size];
                readBuffFromUsr(machine->ReadRegister(4), buff, size);
                OpenFile *f = currentThread->GetFile(fd);
                if (f == NULL)
					break;
                f->Write(buff, size);
                delete []buff;
//                printf("llegue a write\n");
                incrementarPC();
                break;
            }
            case SC_Read:{
				int fd = machine->ReadRegister(6);
				ASSERT(fd != 0); //stdin
				//ver si es 1 (stdout)
				int size = machine->ReadRegister(5);
				char *buff = new char[size];
				OpenFile *f = currentThread->GetFile(fd);
				if (f == NULL) {
					incrementarPC();
					break;
				}
				int r = f->Read(buff, size);
				writeBuffToUsr(buff, machine->ReadRegister(4),r);
				machine->WriteRegister(2,r);
				incrementarPC();
                break;
			}
            case SC_Open:{
				char name[128];
				readStrFromUser(machine->ReadRegister(4),name);
				OpenFile *f = fileSystem->Open(name);
				if (f == NULL) {
					machine->WriteRegister(2,-1);
				} else {
					int fd = currentThread->AddFile(f);
//					printf("%d\n",fd);
					machine->WriteRegister(2,fd);
				}
				incrementarPC();
                break;
			}
            case SC_Close:{
				int fd = machine->ReadRegister(4);
				currentThread->CloseFile(fd);
//				printf("llegue a close\n");
				incrementarPC();
                break;
			}
            case SC_Exit:{
				int s = machine->ReadRegister(4);
				currentThread->exitS = s;
				incrementarPC();
                break;
            }
            case SC_Join:
                break;
        
            case SC_Exec:
                break;
        }
    } else {
	printf("Unexpected user mode exception %d %d\n", which, type);
	ASSERT(false);
    }
}
